// Chat JavaScript for ChatEduca
class ChatApp {
    constructor() {
        this.chatMessages = document.getElementById('chatMessages');
        this.chatInput = document.getElementById('chatInput');
        this.sendButton = document.getElementById('sendButton');
        this.typingIndicator = document.getElementById('typingIndicator');
        
        this.educationalResponses = [
            "Excelente pergunta! Vou explicar isso de forma clara e simples para voc√™.",
            "Essa √© uma d√∫vida muito comum! Deixe-me te ajudar com uma explica√ß√£o detalhada.",
            "√ìtima quest√£o educacional! Vou te dar uma resposta completa e alguns exemplos.",
            "Que pergunta interessante! Vou explicar passo a passo para facilitar seu entendimento.",
            "Essa mat√©ria √© muito importante! Vou te ajudar a compreender melhor esse conceito."
        ];

        this.subjectResponses = {
            matematica: [
                "Em matem√°tica, a chave √© sempre praticar! Vamos resolver isso juntos passo a passo.",
                "Matem√°tica pode parecer dif√≠cil, mas com a t√©cnica certa fica mais f√°cil!",
                "√ìtima pergunta de matem√°tica! Vou explicar usando exemplos pr√°ticos."
            ],
            portugues: [
                "O portugu√™s √© uma l√≠ngua rica! Vou explicar essa regra de forma clara.",
                "Essa √© uma d√∫vida comum em portugu√™s. Vou te dar exemplos para facilitar.",
                "Portugu√™s pode ser desafiador, mas vamos descomplicar isso juntos!"
            ],
            ciencias: [
                "Ci√™ncias √© fascinante! Vou explicar esse conceito de forma interessante.",
                "Que pergunta cient√≠fica legal! Vou usar exemplos do dia a dia para explicar.",
                "A ci√™ncia est√° em tudo ao nosso redor! Vou te mostrar como isso funciona."
            ]
        };

        this.init();
    }

    init() {
        this.setupEventListeners();
        this.chatInput.focus();
        this.scrollToBottom();
        this.setDefaultUserType();
    }

    setDefaultUserType() {
        // Define o tipo de usu√°rio padr√£o se n√£o estiver definido
        if (!localStorage.getItem('chatEducaUserType')) {
            localStorage.setItem('chatEducaUserType', 'student');
        }
    }

    setupEventListeners() {
        // Enter para enviar mensagem
        this.chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        // Controlar estado do bot√£o
        this.chatInput.addEventListener('input', () => {
            this.sendButton.disabled = this.chatInput.value.trim() === '';
        });

        // Foco no input ao clicar na √°rea de mensagens
        this.chatMessages.addEventListener('click', () => {
            this.chatInput.focus();
        });
    }

    sendQuickMessage(text) {
        if (text.trim() !== '') {
            this.addMessage(text, 'user');
            this.chatInput.value = '';
            this.sendButton.disabled = true;
            this.chatInput.disabled = true;
            
            this.showTypingIndicator();
            
            setTimeout(() => {
                this.hideTypingIndicator();
                this.addBotResponse(text);
                this.chatInput.disabled = false;
                this.chatInput.focus();
            }, this.getRandomDelay());
        }
    }

    sendMessage() {
        const message = this.chatInput.value.trim();
        
        if (message === '') return;

        this.addMessage(message, 'user');
        
        this.chatInput.value = '';
        this.sendButton.disabled = true;
        this.chatInput.disabled = true;

        this.showTypingIndicator();

        setTimeout(() => {
            this.hideTypingIndicator();
            this.addBotResponse(message);
            this.chatInput.disabled = false;
            this.chatInput.focus();
        }, this.getRandomDelay());
    }

    addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message`;
        
        const now = new Date();
        const timeString = now.toLocaleTimeString('pt-BR', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        
        // Converter Markdown para HTML se for mensagem do bot
        const formattedText = sender === 'bot' ? this.markdownToHtml(text) : text;
        
        messageDiv.innerHTML = `
            <div>${formattedText}</div>
            <div class="message-time">${timeString}</div>
        `;
        
        this.chatMessages.insertBefore(messageDiv, this.typingIndicator);
        this.scrollToBottom();
    }

    markdownToHtml(text) {
        return text
            // Negrito **texto**
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            // It√°lico *texto*
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            // Quebras de linha
            .replace(/\n/g, '<br>')
            // Listas com -
            .replace(/^- (.*$)/gm, '<li>$1</li>')
            // Envolver listas em <ul>
            .replace(/(<li>.*<\/li>)/gs, '<ul>$1</ul>')
            // Corrigir m√∫ltiplas <ul> consecutivas
            .replace(/<\/ul>\s*<ul>/g, '')
            // T√≠tulos com ##
            .replace(/^## (.*$)/gm, '<h3>$1</h3>')
            // C√≥digo inline `c√≥digo`
            .replace(/`([^`]+)`/g, '<code>$1</code>');
    }

    addBotResponse(userMessage) {
        // Verificar se a knowledge-base est√° dispon√≠vel
        if (window.knowledgeBase) {
            const userType = localStorage.getItem('chatEducaUserType') || 'student';
            const response = window.knowledgeBase.findResponse(userMessage, userType);
            
            if (response) {
                this.addMessage(response.text, 'bot');
                
                // Adicionar materiais se existirem
                if (response.materials && response.materials.length > 0) {
                    this.addMaterials(response.materials);
                }
            } else {
                // Resposta padr√£o se n√£o encontrar na knowledge-base
                const fallbackResponse = this.getEducationalResponse(userMessage);
                this.addMessage(fallbackResponse, 'bot');
            }
        } else {
            // Fallback se knowledge-base n√£o estiver dispon√≠vel
            const response = this.getEducationalResponse(userMessage);
            this.addMessage(response, 'bot');
        }
    }

    getEducationalResponse(message) {
        const lowerMessage = message.toLowerCase();
        
        // Respostas espec√≠ficas para conceitos do Fundamental II
        if (lowerMessage.includes('fra√ß√£o') || lowerMessage.includes('fra√ß√µes')) {
            return "ÔøΩ Fra√ß√µes representam partes de um todo! Por exemplo: 1/2 significa 1 parte de algo dividido em 2 partes iguais. √â como metade de uma pizza! Quer que eu explique as opera√ß√µes com fra√ß√µes?";
        }
        
        if (lowerMessage.includes('porcentagem') || lowerMessage.includes('%')) {
            return "üìä Porcentagem √© uma forma de expressar quantos de cada 100! Por exemplo: 50% = 50 de cada 100 = metade. √â muito usado em descontos e notas. Quer aprender a calcular?";
        }
        
        if (lowerMessage.includes('decimal') || lowerMessage.includes('decimais')) {
            return "üî¢ N√∫meros decimais usam v√≠rgula para separar a parte inteira da parte decimal. Por exemplo: 2,5 = 2 inteiros e 5 d√©cimos. √â como 2 + 1/2!";
        }
        
        if (lowerMessage.includes('fra√ß√£o') || lowerMessage.includes('fra√ß√µes')) {
            return "üî¢ Fra√ß√µes representam partes de um todo! Por exemplo, 1/2 significa uma parte de duas partes iguais. Para somar fra√ß√µes, voc√™ precisa do mesmo denominador. Ex: 1/4 + 1/4 = 2/4 = 1/2. Precisa de mais exemplos?";
        }
        
        // Respostas espec√≠ficas para portugu√™s
        if (lowerMessage.includes('sujeito') && lowerMessage.includes('predicado')) {
            return "üìù O sujeito √© quem pratica a a√ß√£o na frase. Por exemplo: 'O menino correu'. Quem correu? O menino (sujeito). O predicado √© 'correu' (o que o sujeito fez). Quer praticar com mais frases?";
        }
        
        if (lowerMessage.includes('sujeito')) {
            return "üìù O sujeito √© de quem ou do que se fala na frase. Por exemplo: 'Maria estuda'. Quem estuda? Maria √© o sujeito. Posso dar mais exemplos?";
        }
        
        if (lowerMessage.includes('predicado')) {
            return "üìù O predicado √© o que se diz sobre o sujeito. Na frase 'Maria estuda muito', o predicado √© 'estuda muito'. Ele nos conta o que Maria faz. Posso dar mais exemplos?";
        }
        
        // Respostas espec√≠ficas para ci√™ncias
        if (lowerMessage.includes('c√©lula') || lowerMessage.includes('c√©lulas')) {
            return "üî¨ As c√©lulas s√£o as menores unidades da vida! Todo ser vivo √© formado por c√©lulas. Existem c√©lulas animais e vegetais. As c√©lulas t√™m n√∫cleo, citoplasma e membrana. Quer saber mais sobre as partes da c√©lula?";
        }
        
        if (lowerMessage.includes('fotoss√≠ntese')) {
            return "üå± A fotoss√≠ntese √© o processo que as plantas usam para fazer seu pr√≥prio alimento! Elas capturam luz solar, √°gua e CO2 do ar para produzir glicose (a√ß√∫car) e oxig√™nio. Por isso as plantas s√£o verdes e produzem o oxig√™nio que respiramos!";
        }
        
        if (lowerMessage.includes('ciclo da √°gua')) {
            return "üíß O ciclo da √°gua tem tr√™s etapas principais: evapora√ß√£o (√°gua vira vapor), condensa√ß√£o (vapor vira nuvem) e precipita√ß√£o (chuva). √â assim que a √°gua se renova na natureza! Quer saber mais detalhes?";
        }
        
        // Detectar mat√©ria pela mensagem
        if (lowerMessage.includes('matem√°tica') || lowerMessage.includes('matematica') || 
            lowerMessage.includes('conta') || lowerMessage.includes('n√∫mero')) {
            return this.getRandomResponse(this.subjectResponses.matematica);
        }
        
        if (lowerMessage.includes('portugu√™s') || lowerMessage.includes('portugues') || 
            lowerMessage.includes('gram√°tica') || lowerMessage.includes('texto') || 
            lowerMessage.includes('verbo')) {
            return this.getRandomResponse(this.subjectResponses.portugues);
        }
        
        if (lowerMessage.includes('ci√™ncias') || lowerMessage.includes('ciencias') || 
            lowerMessage.includes('biologia') || lowerMessage.includes('f√≠sica') || 
            lowerMessage.includes('qu√≠mica')) {
            return this.getRandomResponse(this.subjectResponses.ciencias);
        }

        // Respostas espec√≠ficas para perguntas comuns
        if (lowerMessage.includes('como resolver') || lowerMessage.includes('como fazer')) {
            return "Vou te ensinar o passo a passo! üìö Primeiro, vamos identificar o que sabemos, depois aplicar a t√©cnica adequada. Voc√™ pode me dar mais detalhes sobre o exerc√≠cio?";
        }

        if (lowerMessage.includes('o que √©') || lowerMessage.includes('o que s√£o')) {
            return "√ìtima pergunta conceitual! üí° Vou explicar de forma clara e simples, com exemplos pr√°ticos para voc√™ entender melhor.";
        }

        if (lowerMessage.includes('ajuda') || lowerMessage.includes('socorro') || lowerMessage.includes('n√£o entendo')) {
            return "Calma, estou aqui para te ajudar! üòä Vamos resolver isso juntos. Pode me explicar qual parte est√° mais dif√≠cil para voc√™?";
        }

        if (lowerMessage.includes('obrigado') || lowerMessage.includes('obrigada') || lowerMessage.includes('valeu')) {
            return "De nada! üòä Fico feliz em ajudar voc√™ a aprender. Se tiver mais d√∫vidas, estou sempre aqui!";
        }

        if (lowerMessage.includes('oi') || lowerMessage.includes('ol√°') || lowerMessage.includes('bom dia') || 
            lowerMessage.includes('boa tarde') || lowerMessage.includes('boa noite')) {
            return "Ol√°! üëã Que bom te ver aqui! Estou pronto para ajudar voc√™ com suas d√∫vidas educacionais. Em que mat√©ria posso te auxiliar hoje?";
        }

        // Resposta padr√£o educacional
        return this.getRandomResponse(this.educationalResponses);
    }

    getRandomResponse(responses) {
        return responses[Math.floor(Math.random() * responses.length)];
    }

    showTypingIndicator() {
        this.typingIndicator.style.display = 'block';
        this.scrollToBottom();
    }

    hideTypingIndicator() {
        this.typingIndicator.style.display = 'none';
    }

    scrollToBottom() {
        setTimeout(() => {
            this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        }, 100);
    }

    getRandomDelay() {
        return Math.random() * 2000 + 1000; // Entre 1 e 3 segundos
    }

    goBack() {
        if (confirm('Tem certeza que deseja sair do chat?')) {
            // Try to go back in history, fallback to home page
            if (window.history.length > 1) {
                window.history.back();
            } else {
                window.location.href = '../index.html';
            }
        }
    }

    addWelcomeExamples() {
        const examples = [
            "Experimente perguntar: 'Como resolver equa√ß√µes do primeiro grau?'",
            "Ou: 'O que √© sujeito e predicado?'",
            "Tamb√©m posso ajudar com: 'O que s√£o c√©lulas?'"
        ];
        
        setTimeout(() => {
            this.addMessage("üí° Algumas sugest√µes para come√ßar:", 'bot');
            examples.forEach((example, index) => {
                setTimeout(() => {
                    this.addMessage(example, 'bot');
                }, (index + 1) * 1000);
            });
        }, 2000);
    }

    addMaterials(materials) {
        const materialsDiv = document.createElement('div');
        materialsDiv.className = 'message bot-message materials-message';
        
        const now = new Date();
        const timeString = now.toLocaleTimeString('pt-BR', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        
        // Criar container de conte√∫do
        const materialsContent = document.createElement('div');
        materialsContent.className = 'materials-content';
        
        // Criar t√≠tulo
        const title = document.createElement('h4');
        title.textContent = 'üìö Materiais Complementares:';
        materialsContent.appendChild(title);
        
        // Criar lista de materiais
        const materialsList = document.createElement('div');
        materialsList.className = 'materials-list';
        
        materials.forEach(material => {
            const materialItem = document.createElement('div');
            materialItem.className = 'material-item';
            materialItem.style.cursor = 'pointer';
            
            // Adicionar evento de clique no item todo
            materialItem.addEventListener('click', (e) => {
                // Prevenir propaga√ß√£o se clicou no link direto
                if (e.target.tagName === 'A' || e.target.closest('a')) {
                    return;
                }
                window.open(material.url, '_blank');
            });
            
            // √çcone do material
            const icon = document.createElement('i');
            icon.className = `fas fa-${this.getMaterialIcon(material.icon)}`;
            materialItem.appendChild(icon);
            
            // T√≠tulo do material
            const titleSpan = document.createElement('span');
            titleSpan.className = 'material-title';
            titleSpan.textContent = material.title;
            materialItem.appendChild(titleSpan);
            
            // Link do material
            const link = document.createElement('a');
            link.href = material.url;
            link.target = '_blank';
            link.className = 'material-link';
            link.title = `Abrir: ${material.title}`;
            
            const linkIcon = document.createElement('i');
            linkIcon.className = 'fas fa-external-link-alt';
            link.appendChild(linkIcon);
            
            materialItem.appendChild(link);
            materialsList.appendChild(materialItem);
        });
        
        materialsContent.appendChild(materialsList);
        materialsDiv.appendChild(materialsContent);
        
        // Adicionar timestamp
        const timeDiv = document.createElement('div');
        timeDiv.className = 'message-time';
        timeDiv.textContent = timeString;
        materialsDiv.appendChild(timeDiv);
        
        this.chatMessages.insertBefore(materialsDiv, this.typingIndicator);
        this.scrollToBottom();
    }

    getMaterialIcon(iconName) {
        const iconMap = {
            'play': 'play-circle',
            'pencil-alt': 'pencil-alt',
            'book': 'book',
            'users': 'users',
            'gamepad': 'gamepad',
            'calculator': 'calculator',
            'ruler': 'ruler',
            'shapes': 'shapes',
            'book-open': 'book-open',
            'question-circle': 'question-circle',
            'home': 'home',
            'spell-check': 'spell-check',
            'book-reader': 'book-reader',
            'glasses': 'glasses',
            'list': 'list',
            'flask': 'flask',
            'microscope': 'microscope',
            'globe': 'globe',
            'telescope': 'telescope',
            'rocket': 'rocket',
            'tint': 'tint',
            'leaf': 'leaf',
            'utensils': 'utensils'
        };
        
        return iconMap[iconName] || 'file';
    }
}

// Inst√¢ncia global do chat
let chatApp;

// Fun√ß√µes globais para os bot√µes
function sendQuickMessage(text) {
    if (chatApp) {
        chatApp.sendQuickMessage(text);
    }
}

function sendMessage() {
    if (chatApp) {
        chatApp.sendMessage();
    }
}

function goBack() {
    if (chatApp) {
        chatApp.goBack();
    }
}

// Inicializar quando DOM estiver carregado
document.addEventListener('DOMContentLoaded', function() {
    chatApp = new ChatApp();
});

// Prevenir zoom no iOS
document.addEventListener('touchstart', function(e) {
    if (e.touches.length > 1) {
        e.preventDefault();
    }
});

// Feedback visual ao tocar (mobile)
document.addEventListener('touchstart', function(e) {
    if (e.target.classList.contains('quick-btn') || e.target.classList.contains('send-button')) {
        e.target.style.transform = 'scale(0.95)';
    }
});

document.addEventListener('touchend', function(e) {
    if (e.target.classList.contains('quick-btn') || e.target.classList.contains('send-button')) {
        setTimeout(() => {
            e.target.style.transform = '';
        }, 100);
    }
});
